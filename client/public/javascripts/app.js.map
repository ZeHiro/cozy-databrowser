{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/collections/doctype_collection.coffee","app/initialize.coffee","app/lib/app_helpers.coffee","app/lib/base_view.coffee","app/lib/view_collection.coffee","app/models/doctype_model.coffee","app/router.coffee","app/views/app_view.coffee","app/views/doctypes_view.coffee","app/views/templates/doctypes.jade","app/views/templates/home.jade","app/views/updating_collection_view.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1GA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;;A","sourcesContent":["module.exports =\n\n    initialize: ->\n        # Used in inter-app communication\n        #SocketListener = require '../lib/socket_listener'\n\n        # Routing management\n        Router = require 'router'\n        @router = new Router()\n        Backbone.history.start()\n\n        # Makes this object immuable.\n        Object.freeze this if typeof Object.freeze is 'function'","module.exports = class DoctypeCollection extends Backbone.Collection\n\tmodel: require '../models/doctype_model'\n\turl: '/doctypes'\n\t#tagName: 'li'\n\t#template: _.template($('#doctypes-list').html())\n\t\n\t#initialize: ->\n    \t#_.bindAll(@, 'render')\n\n    #render: ->\n    \t#@.$el.html @template(@model.toJSON())\n    \t#@","app = require 'application'\n\n# The function called from index.html\n$ ->\n    require 'lib/app_helpers'\n\n    app.initialize()","(() ->\n    # IIFE to avoid collisions with other variables\n    (->\n        # Make it safe to do console.log() always.\n        console = window.console = window.console or {}\n        method = undefined\n        dummy = ->\n        methods = ('assert,count,debug,dir,dirxml,error,exception,\n                   group,groupCollapsed,groupEnd,info,log,markTimeline,\n                   profile,profileEnd,time,timeEnd,trace,warn').split ','\n\n        console[method] = console[method] or dummy while method = methods.pop()\n    )()\n)()\n","module.exports = class BaseView extends Backbone.View\n\n    template: ->\n\n    initialize: ->\n\n    getRenderData: ->\n        model: @model?.toJSON()\n\n    render: ->\n        @beforeRender()\n        @$el.html @template(@getRenderData())\n        @afterRender()\n        @\n\n    beforeRender: ->\n\n    afterRender: ->\n\n    destroy: ->\n        @undelegateEvents()\n        @$el.removeData().unbind()\n        @remove()\n        Backbone.View::remove.call @\n","BaseView = require 'lib/base_view'\n\n# View that display a collection of subitems\n# used to DRY views\n# Usage : new ViewCollection(collection:collection)\n# Automatically populate itself by creating a itemView for each item\n# in its collection\n\n# can use a template that will be displayed alongside the itemViews\n\n# itemView       : the Backbone.View to be used for items\n# itemViewOptions : the options that will be passed to itemViews\n# collectionEl : the DOM element's selector where the itemViews will\n#                be displayed. Automatically falls back to el if null\n\nmodule.exports = class ViewCollection extends BaseView\n\n    itemview: null\n\n    views: {}\n\n    template: -> ''\n\n    itemViewOptions: ->\n\n    collectionEl: null\n\n    # add 'empty' class to view when there is no subview\n    onChange: ->\n        @$el.toggleClass 'empty', _.size(@views) is 0\n\n    # can be overriden if we want to place the subviews somewhere else\n    appendView: (view) ->\n        @$collectionEl.append view.el\n\n    # bind listeners to the collection\n    initialize: ->\n        super\n        @views = {}\n        @listenTo @collection, \"reset\",   @onReset\n        @listenTo @collection, \"add\",     @addItem\n        @listenTo @collection, \"remove\",  @removeItem\n\n        if not @collectionEl?\n            collectionEl = el\n\n    # if we have views before a render call, we detach them\n    render: ->\n        view.$el.detach() for id, view of @views\n        super\n\n    # after render, we reattach the views\n    afterRender: ->\n        @$collectionEl = $(@collectionEl)\n        @appendView view.$el for id, view of @views\n        @onReset @collection\n        @onChange @views\n\n    # destroy all sub views before remove\n    remove: ->\n        @onReset []\n        super\n\n    # event listener for reset\n    onReset: (newcollection) ->\n        view.remove() for id, view of @views\n        newcollection.forEach @addItem\n\n    # event listeners for add\n    addItem: (model) =>\n        options = _.extend {}, {model: model}, @itemViewOptions(model)\n        view = new @itemview(options)\n        @views[model.cid] = view.render()\n        @appendView view\n        @onChange @views\n\n    # event listeners for remove\n    removeItem: (model) =>\n        @views[model.cid].remove()\n        delete @views[model.cid]\n\n        @onChange @views","module.exports = class DoctypeModel extends Backbone.Model\n\trootUrl: \"/doctypes\"\n","AppView = require 'views/app_view'\nDoctypesView = require 'views/doctypes_view'\n\nmodule.exports = class Router extends Backbone.Router\n\n    routes:\n        '': 'main'\n        'doctypes' : 'doctypes'\n\n    main: ->\n        mainView = new AppView()\n        mainView.render()\n\n    doctypes: ->\n    \tdoctypesView = new DoctypesView()\n    \tdoctypesView.render()","BaseView = require '../lib/base_view'\n\nmodule.exports = class AppView extends BaseView\n\n    el: 'body.application'\n    template: require('./templates/home')\n\n    afterRender: ->\n        console.log \"write more code here !\"\n\n","BaseView = require '../lib/base_view'\n\nmodule.exports = class DoctypesView extends BaseView\n\n    el: 'body.application'    \n    template: require('./templates/doctypes')\n\n    render: ->\n    \tDoctypeCollection = require('/collections/doctype_collection')\n    \tdc = new DoctypeCollection\n    \tdc.fetch({ \t \t\n    \t \tsuccess:(model, response) ->                                \n                for data in response\n                    eltDoctypeLi = $(document.createElement('li'))\n                    eltDoctypeLi.append($(document.createElement('a')).text(data).attr(\"href\", \"/#search\"))\n                    $('body.application').append(eltDoctypeLi)\n    \t})\n","#content\n\th1 Doctypes list\n\thr\n","#content\n  h1 Cozy template\n  h2 Welcome\n  ul\n    li \n      a(href=\"https://github.com/mycozycloud/cozy-setup/wiki\") Documentation\n    li \n        a(href=\"https://github.com/mycozycloud/cozy-setup/wiki/Getting-started\")\n          | Getting Started\n    li \n      a(href=\"https://github.com/mycozycloud\") Github\n","module.exports = class UpdatingCollectionView extends Backbone.View\n  initialize : (options) -> \n    _(this).bindAll('add', 'remove');\n \n    if !options.childViewConstructor \n      throw \"no child view constructor provided\"\n    if !options.childViewTagName \n      throw \"no child view tag name provided\"\n \n    this._childViewConstructor = options.childViewConstructor\n    this._childViewTagName = options.childViewTagName\n \n    this._childViews = []\n \n    this.collection.each(this.add)\n \n    this.collection.bind('add', this.add)\n    this.collection.bind('remove', this.remove)\n  \n \n  add : (model) ->\n    childView = new this._childViewConstructor({\n      tagName : this._childViewTagName\n      model : model\n    })\n \n    this._childViews.push(childView)\n \n    if this._rendered\n      $(this.el).append(childView.render().el)\n    \n  \n \n  remove : (model) ->\n    viewToRemove = _(this._childViews).select((cv) ->  \n      return cv.model is model\n    )[0]\n    this._childViews = _(this._childViews).without(viewToRemove)\n \n    if this._rendered \n      $(viewToRemove.el).remove()\n\n \n  render : ->\n    that = this\n    this._rendered = true\n \n    $(this.el).empty()\n \n    _(this._childViews).each((childView) -> \n      $(that.el).append(childView.render().el)\n    )\n \n    return this"]}